self-balancing

1. find violated node with balance factor > 1
2. Then decide either single or double rotation
-single(doesn't belong to interval)
-double(belongs to interval)

single left rotated on violated node bf  > 1

//left rotation
node* func(node* oldroot) {
  if(oldroot->right->left && !oldroot->right) { ?
    oldroot->right = oldroot->right->left ?
  } else if (oldroot->left->right && !oldroot->right->left) { ?
     oldroot->right->left = oldroot->left->right; ?
  }
  nroot = oldroot->right;
  nroot->left = oldroot;
  return nroot;
}

void DoubleRightRotation(node*) {
  slr(root)
  srr(root)
}

void DoubleLeftRotation(node*) {
  
}

if node in between violated node and parent eg 91 [81..90..] = double rotation



BT class -> BST inherits -> AVL inherits (self-balancing bst)

